{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "15646779254052758812"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment name (dev, test, prod)"
      }
    },
    "workloadName": {
      "type": "string",
      "metadata": {
        "description": "Workload name for resource naming"
      }
    },
    "keyVaultAdminObjectId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Object ID of the user/service principal to grant Key Vault access (GUID format)"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Common resource tags"
      }
    }
  },
  "variables": {
    "resourceToken": "[uniqueString(resourceGroup().id)]",
    "keyVaultName": "[format('kv-{0}', take(variables('resourceToken'), 11))]",
    "managedIdentityName": "[format('mi-{0}-{1}-{2}', parameters('workloadName'), parameters('environment'), parameters('location'))]",
    "deploymentScriptName": "[format('ds-generate-secrets-{0}', parameters('environment'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[tenant().tenantId]",
        "enableRbacAuthorization": true,
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true,
        "enabledForDiskEncryption": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "publicNetworkAccess": "Enabled",
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), 'Key Vault Administrator')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('keyVaultAdminObjectId')))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), parameters('keyVaultAdminObjectId'), 'Key Vault Administrator')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
        "principalId": "[parameters('keyVaultAdminObjectId')]",
        "principalType": "User"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[format('ds-rbac-delay-{0}', parameters('environment'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "11.0",
        "retentionInterval": "P1D",
        "timeout": "PT5M",
        "cleanupPreference": "OnSuccess",
        "scriptContent": "      Write-Output \"Waiting for RBAC permissions to propagate...\"\r\n      Start-Sleep -Seconds 60\r\n      Write-Output \"RBAC propagation delay completed\"\r\n    "
      },
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), 'Key Vault Administrator'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[variables('deploymentScriptName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "11.0",
        "retentionInterval": "P1D",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "scriptContent": "      param(\r\n        [string]$KeyVaultName,\r\n        [string]$Environment\r\n      )\r\n      \r\n      Write-Output \"Starting secure credential generation for environment: $Environment\"\r\n      \r\n      # Function to generate secure password\r\n      function New-SecurePassword {\r\n        param([int]$Length = 20)\r\n        \r\n        # Character sets for password complexity\r\n        $upperCase = \"ABCDEFGHJKLMNPQRSTUVWXYZ\"\r\n        $lowerCase = \"abcdefghijkmnpqrstuvwxyz\"\r\n        $numbers = \"23456789\"\r\n        $specialChars = \"!@#$%^&*\"\r\n        \r\n        # Ensure at least one character from each set\r\n        $password = @()\r\n        $password += $upperCase[(Get-Random -Maximum $upperCase.Length)]\r\n        $password += $lowerCase[(Get-Random -Maximum $lowerCase.Length)]\r\n        $password += $numbers[(Get-Random -Maximum $numbers.Length)]\r\n        $password += $specialChars[(Get-Random -Maximum $specialChars.Length)]\r\n        \r\n        # Fill remaining length with random characters from all sets\r\n        $allChars = $upperCase + $lowerCase + $numbers + $specialChars\r\n        for ($i = $password.Count; $i -lt $Length; $i++) {\r\n          $password += $allChars[(Get-Random -Maximum $allChars.Length)]\r\n        }\r\n        \r\n        # Shuffle the password array and join\r\n        $shuffled = $password | Sort-Object { Get-Random }\r\n        return ($shuffled -join \"\")\r\n      }\r\n      \r\n      try {\r\n        # Generate secure passwords\r\n        $vmPassword = New-SecurePassword -Length 20\r\n        $sqlPassword = New-SecurePassword -Length 20\r\n        \r\n        Write-Output \"Generated secure credentials successfully\"\r\n        \r\n        # Convert to SecureString for Key Vault\r\n        $vmSecurePassword = ConvertTo-SecureString -String $vmPassword -AsPlainText -Force\r\n        $sqlSecurePassword = ConvertTo-SecureString -String $sqlPassword -AsPlainText -Force\r\n        \r\n        # Store secrets in Key Vault\r\n        Write-Output \"Storing VM admin password in Key Vault...\"\r\n        Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name \"vm-admin-password\" -SecretValue $vmSecurePassword\r\n        \r\n        Write-Output \"Storing SQL admin password in Key Vault...\"\r\n        Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name \"sql-admin-password\" -SecretValue $sqlSecurePassword\r\n        \r\n        Write-Output \"All credentials generated and stored successfully in Key Vault: $KeyVaultName\"\r\n        \r\n        # Output summary for deployment logs\r\n        $result = @{\r\n          KeyVaultName = $KeyVaultName\r\n          SecretsGenerated = @(\"vm-admin-password\", \"sql-admin-password\")\r\n          Environment = $Environment\r\n          Status = \"Success\"\r\n        }\r\n        \r\n        $DeploymentScriptOutputs = @{}\r\n        $DeploymentScriptOutputs['result'] = $result\r\n        \r\n      } catch {\r\n        Write-Error \"Failed to generate or store credentials: $($_.Exception.Message)\"\r\n        throw\r\n      }\r\n    ",
        "arguments": "[format('-KeyVaultName \"{0}\" -Environment \"{1}\"', variables('keyVaultName'), parameters('environment'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "[resourceId('Microsoft.Resources/deploymentScripts', format('ds-rbac-delay-{0}', parameters('environment')))]"
      ]
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "keyVaultId": {
      "type": "string",
      "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
    },
    "managedIdentityId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
    },
    "managedIdentityPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]"
    },
    "secretGenerationStatus": {
      "type": "string",
      "value": "Completed"
    },
    "resourceToken": {
      "type": "string",
      "value": "[variables('resourceToken')]"
    }
  }
}